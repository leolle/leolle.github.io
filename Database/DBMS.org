#+TITLES: Database concept
#+KEYWORD: database
#+SETUPFILE: ../configOrg/level1.org
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+DATE: <2017-09-19 Tue>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)


* database = set of named relations(or tables)
- set of columns
- each tuple has a value for each column
- each attribute has a type(or domain)
** schema
- structural description of relations in dbname
- instance
- key: attribute whose value is unique in each tuple
* Querying Relational Database
** Query Language
- Relational Algebra
formal
- SQL
actual / implemented
* Relational Algebra
** select, project, join
- query on set of reltations produces relations as a result
- use operators to filter, slice, combine results.
- Select operator:
$$\sigma_condition(Expression)$$
$$\s GPA > 3.7 ^ HS < 1000 Student$$
- Project operators: picks cerntain columns
$$\pi_Apply1,Apply2,...,Applyn(Expression)$$
$$ \pi_ID apply$$
$$\pi_ID,StudentName(\sigma_GPA > 3.7 Student)$$
*** cross-product:
- E1 * E2
*** natural join
*** theta join
** Set operators, renaming, notation
*** Union operator
- List of college and student names
*** Intersection operator
- Join:
  $E1 \join E2$
***
* SQL
** Basic select statement
- Three tables.
College(cName, state, enrollment)
Student(sID, sName, GPA, sizeHS)
Apply(sID, cName, major, decision)
unique index: cName, sID, and sID+cName+major.

- Select decision of students whose high school size is less than 1000, major is computer science and the application college is Standford.

#+BEGIN_SRC sql
select sname, GPA, decision
from Student, Apply
where Student.sID = Apply.sID
and sizeHS < 1000 and major = 'CS' and cname = 'Standford'
order by GPA desc;
#+END_SRC
** oracle select limit:
#+BEGIN_SRC sql
select * from table where rownum<=1000
order by condition_1, condition_2;
#+END_SRC
** Table variables and set operators
*** Table variables
using for alternative name readable, express relation with other prompts.
*** Set operators
**** Union, intersect, except
- select student enrollment.
#+BEGIN_SRC sql
select S.sID, sName, GPA, A.cName, enrollment
from Student S, College C, Apply A
where A.sID = S.sID and A.cName = C.cName;
#+END_SRC
- select students having the same GPA.
#+BEGIN_SRC sql
select S1.sID, S1.sName, S1.GPA, S2.sID, S2.sName, S2.GPA,
from Student S1, Student S2
where S1.GPA = S2.GPA and S1.sID > S2.sID;
#+END_SRC
***** Union
- select union of college names and students names.
Remember: union will remove duplicates for us.
#+BEGIN_SRC sql
select cName as name from College
union
select sName as name from Student;
#+END_SRC
***** Intersect
- select students both select cs and ee.
#+BEGIN_SRC sql
select sID from Apply where major = 'CS'
intersect
select sID from Apply where major = 'EE';
#+END_SRC
***** Except
- select students who apply cs but not ee.
#+BEGIN_SRC sql
select sID from Apply where major = 'CS'
except
select sID from Apply where major = 'EE';
#+END_SRC
**** Subqueries in WHERE
- select IDs and names of students who have aplied to major in CS at some college.
#+BEGIN_SRC sql
select sID, sName
from Student
where sID in (select sID from Apply where major = 'CS');
#+END_SRC

- select max value from a column.
#+BEGIN_SRC sql
select cName
from College C1
where not exists (select * from College C2
where C2.enrollment > C1.enrollment);
#+END_SRC

- count
#+BEGIN_SRC sql
SELECT COUNT(aggregate_expression)
FROM tables
[WHERE conditions];
#+END_SRC
***** all, any, exists, not exists.
- Students not from the smallest high school.
#+BEGIN_SRC sql
select sID, sName, sizeHS
from Student
where sizeHS > any(select sizeHS from Student);
#+END_SRC

**** Subqueries from select and from
- Students whoses scaled GPA changes GPA by more than 1.
#+BEGIN_SRC sql
select *
from (select sID, sName, GPA, GPA*(sizeHS/1000.0) as scaledGPA
from Student) as G
where (G.scaledGPA - GPA) > 1.0;
#+END_SRC

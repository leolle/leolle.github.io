#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: Docker
#+DATE: <2017-11-15 Wed>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../configOrg/level1.org

* Docker 阿里加速
https://dev.aliyun.com/search.html?spm=5176.1971733.0.1.67788153aOGyoW

https://cr.console.aliyun.com/?spm=5176.1971733.0.2.67788153k1LQf2#/accelerator

- 配置镜像加速器
#+BEGIN_SRC shell
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://tslxqqy2.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker

#+END_SRC
* Docker 安装neo4j
[[https://hub.docker.com/_/neo4j/]]
** search
#+BEGIN_SRC shell
docker search neo4j
#+END_SRC

#+RESULTS:
| NAME                              | DESCRIPTION      | STARS         | OFFICIAL | AUTOMATED       |           |            |                  |         |      |      |
| neo4j                             | Neo4j            | is            | a        | highly          | scalable, | robust     | native           | ...     |  406 | [OK] |
| tpires/neo4j                      | Neo4j            | is            | a        | highly          | scalable, | robust     | (fully           | ...     |   82 | [OK] |
| kbastani/neo4j-graph-analytics    | Graph            | analytics     | engine   | for             | Neo4j     | using      | Apa...           | 24      | [OK] |      |
| kbastani/docker-neo4j             | Neo4j            | Graph         | Database | Community       | Edition   | 2.2.3      | 14               | [OK]    |      |      |
| frodenas/neo4j                    | A                | Docker        | Image    | for             | Neo4j     | 8          | [OK]             |         |      |      |
| ekino/neo4j-cluster               | Up               | &             | Running  | Neo4J           | Cluster   | :          | [[https://githu]]... | 2       | [OK] |      |
| thetallgrassnet/alpine-neo4j      | Minimal          | Docker        | Images   | for             | the       | Neo4j      | Graph            | ...     |    1 | [OK] |
| infothrill/neo4j-shell-tools      | Neo4j            | community     | edition  | with            | shell     | tools      | p...             | 1       | [OK] |      |
| primedio/neo4j-cluster-ecs        | Neo4J            | Docker        | for      | the             | AWS       | E2         | Container        | Serv... |    1 |      |
| neo4j/neo4j-dcos                  | Neo4j            | image         | to       | run             | in        | DCOS/Mesos | 0                |         |      |      |
| neo4j/neo4j-experimental          | Experimental     | Neo4j         | Docker   | images          | 0         |            |                  |         |      |      |
| steelbridgelabs/neo4j-cluster-ecs | Amazon           | ECS           | Neo4J    | Causal          | Cluster   | docker     | image            | 0       | [OK] |      |
| coco/ft-neo4j                     | neo4j            | 0             | [OK]     |                 |           |            |                  |         |      |      |
| livingobjects/neo4j               | Neo4J            | 0             | [OK]     |                 |           |            |                  |         |      |      |
| phenompeople/neo4j                | Neo4j            | is            | a        | highly          | scalable, | robust     | native           | ...     |    0 | [OK] |
| i386/neo4j                        | Neo4j            | is            | a        | highly          | scalable, | robust     | native           | ...     |    0 |      |
| coco/roles-rw-neo4j               | roles-rw-neo4j   | 0             | [OK]     |                 |           |            |                  |         |      |      |
| coco/content-rw-neo4j             | content-rw-neo4j | 0             | [OK]     |                 |           |            |                  |         |      |      |
| coco/people-rw-neo4j              | An               | API           | for      | reading/writing | people    | into       | Neo...           | 0       | [OK] |      |
| amd64/neo4j                       | Neo4j            | is            | a        | highly          | scalable, | robust     | native           | ...     |    0 |      |
| neo4j/neo4j-dcos-proxy            | A                | HTTP          | proxy    | to              | expose    | Neo4j      | Browser          | HTTP    |  ... | 0    |
| trollin/neo4j                     | 0                |               |          |                 |           |            |                  |         |      |      |
| coco/genres-rw-neo4j              | An               | API           | for      | reading/writing | genres    | into       | Neo4j.           | 0       | [OK] |      |
| coco/annotations-rw-neo4j         | Annotation       | Reader-Writer | for      | Neo4j           | 0         | [OK]       |                  |         |      |      |
| c12e/neo4j                        | 0                | [OK]          |          |                 |           |            |                  |         |      |      |
** pull
#+BEGIN_SRC shell
docker pull neo4j:3.3
#+END_SRC
** start an instance
#+BEGIN_SRC shell
docker run --publish=7474:7474 --publish=7687:7687 --env=NEO4J_AUTH=none --volume=$HOME/neo4j/data:/data --volume=$HOME/neo4j/logs:/logs neo4j:latest
#+END_SRC
** access neo4j in webbrowser
put the localhost url in bolt: 127.0.0.1
* Docker commands
- install docker-compose:
1. download docker-compose-Linux-x86_64 https://github.com/docker/compose/releases
2. sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
3. sudo chmod +x /usr/local/bin/docker-compose
4. check docker-compose -v

- list all images
#+BEGIN_SRC bash
docker images
#+END_SRC
- rm an image
#+BEGIN_SRC bash
docker rmi image_name
#+END_SRC
- list the last created container
#+BEGIN_SRC bash
docker ps -l
#+END_SRC

- delete all listed container ids:
#+BEGIN_SRC bash
docker rm 'sudo docker ps -aq --no-trunc'
docker ps -aq --no-trunc
#+END_SRC

- remove containers exited * days ago:
#+BEGIN_SRC shell
docker ps --all | grep " [days]* ago" | awk '{print $1}' | xargs docker rm
docker images | grep " [days]* ago" | awk '{print $3}' | xargs docker rmi
docker images | grep " [hours]* ago" | awk '{print $3}' | xargs docker rmi
#+END_SRC

- dockerfile debian 和pip使用国内源
python官方镜像是基于debian的。国内使用时定制一下，加快下载速度。

1 debian本身使用国内源
dockfile中:

#国内debian源
ADD sources.list /etc/apt/
sources.list在dockerfile同目录下：
deb http://mirrors.ustc.edu.cn/debian/ stretch main non-free contrib
deb http://mirrors.ustc.edu.cn/debian/ stretch-updates main non-free contrib
deb http://mirrors.ustc.edu.cn/debian/ stretch-backports main non-free contrib
deb-src http://mirrors.ustc.edu.cn/debian/ stretch main non-free contrib
deb-src http://mirrors.ustc.edu.cn/debian/ stretch-updates main non-free contrib
deb-src http://mirrors.ustc.edu.cn/debian/ stretch-backports main non-free contrib
deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main non-free contrib

2 pip使用国内源
#用国内源加速大包的安装
COPY pip.conf /etc/pip.conf

pip.conf

[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple

- What is docker.io in relation to docker-ce and docker-ee?
Older versions of Docker were called docker or docker-engine or docker.io

docker-io package was the name used on Debian/Ubuntu for the official docker release.

Main reason was to avoid a name conflict with Ubuntu docker system-tray binary.

http://manpages.ubuntu.com/manpages/precise/man1/docker.1.html

Docker now has an enterprise version (EE) and a free community Edition version(CE)


* Docker install mongodb
** create a container:
#+BEGIN_SRC bash
docker run --name wiki -p 27017:27017 -v $PWD/mongodb:/data/db -d mongo:3.2
#+END_SRC
-p 27017:27017 :将容器的27017 端口映射到主机的27017 端口

-v $PWD/db:/data/db :将主机中当前目录下的db挂载到容器的/data/db，作为mongo数据存储目录
** run the interactive mongo shell:
#+BEGIN_SRC bash
docker exec -it wiki mongo
#+END_SRC
** 使用mongo镜像执行mongo 命令连接到刚启动的容器,主机IP为172.17.0.1
#+BEGIN_SRC bash
➜  ~ docker run -it mongo:3.2 mongo --host 172.17.0.1
MongoDB shell version: 3.2.9
connecting to: 172.17.0.1:27017/test
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user
Server has startup warnings:
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten]
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten]
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'.
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2017-12-22T02:00:13.170+0000 I CONTROL  [initandlisten]
>

#+END_SRC
- Create the system user administrator
*you are not allowed to create user under the local dabase.*
#+BEGIN_SRC mongo
> use admin
> db.createUser(
     {
       user: "root",
       pwd: "root",
       roles: [ { role: "userAdminAnyDatabase", db: "wiki" } ]
     }
 )
Successfully added user: {
	"user" : "root",
	"roles" : [
		{
			"role" : "userAdminAnyDatabase",
			"db" : "admin"
		}
	]
}

#+END_SRC
- Create a user administrator for a single database
#+BEGIN_SRC mongo
use records
db.createUser(
  {
    user: "wiki",
    pwd: "root",
    roles: [ { role: "readWrite", db: "local" } ]
  }
)
db.createUser(
  {
    user: "wiki",
    pwd: "root",
    roles: [ { role: "userAdmin", db: "wiki" } ]
  }
)
db.createUser(
     {
       user:"wiki",
       pwd:"root",
       roles:[{role:"root",db:"wiki"}]
     }
  )
db.createUser(
  {
    user: "wiki",
    pwd: "root",
    roles: [ { role: "userAdmin", db: "wiki" } ]
  }
)
#+END_SRC
- delete content of a collection
#+BEGIN_SRC nosql:mongodb
db.collection_name.remove({})
#+END_SRC
- 验证用户
>use local
>db.auth('myadmin', 'secret')

- create index
#+BEGIN_SRC mongodb
db.collection.createIndex( { orderDate: 1 } )
#+END_SRC

- create a new database:
#+BEGIN_SRC mongodb
>use new_database
#+END_SRC
- Drop Database in MongoDB
#+BEGIN_SRC mongodb
db.dropDatabase(); # drop currently using database
#+END_SRC
- Create Collection
#+BEGIN_SRC mongodb
db.createCollection(name, options)
#+END_SRC
- Find All Documents in a Collection
#+BEGIN_SRC mongodb
db.bios.find()

#+END_SRC
- Find Documents that Match Query Criteria
#+BEGIN_SRC mongodb
db.products.find( { qty: { $gt: 25 } } )
#+END_SRC
- count
#+BEGIN_SRC mongodb
db.xueqiu.count()
#+END_SRC
* Clickhouse
- run clickhouse

#+BEGIN_SRC bash
docker run -d --name ch_server --ulimit nofile=262144:262144 --volume=/home/davanci/database:/var/lib/clickhouse  --volume=/home/davanci/files:/files -p 9001:9000 -p 8123:8123 yandex/clickhouse-server
#+END_SRC
